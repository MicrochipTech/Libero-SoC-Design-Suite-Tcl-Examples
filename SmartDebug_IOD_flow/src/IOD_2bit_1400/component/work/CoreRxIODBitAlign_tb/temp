//////////////////////////////////////////////////////////////////////
// Created by SmartDesign Thu Mar 28 14:57:51 2019
// Version: PolarFire v2.3 12.200.35.9
//////////////////////////////////////////////////////////////////////

//`timescale 1ns / 100ps
`timescale 1ps/1ps
// CoreRxIODBitAlign_tb
module CoreRxIODBitAlign_tb(
    // Inputs
    REF_CLK_0,
    // Outputs
    BITALIGN_DATA_MATCH,
    BITALIGN_DATA_SYNC,
    BIT_ALGN_CLR_FLGS_0,
    BIT_ALGN_DIR_0,
    BIT_ALGN_DONE_0,
    BIT_ALGN_LOAD_0,
    BIT_ALGN_MON_CALC_RST,
    BIT_ALGN_MOVE_0,
    BIT_ALGN_OOR_0,
    BIT_ALGN_RSTRT_0,
    BIT_ALGN_START_0,
    DELAY_LINE_OUT_OF_RANGE_0,
    DELAY_LINE_OUT_OF_RANGE_1,
    EYE_MONITOR_EARLY_0,
    EYE_MONITOR_EARLY_1,
    EYE_MONITOR_LATE_0,
    EYE_MONITOR_LATE_1,
    L0_RXD_DATA,
    L1_RXD_DATA,
    OUT0_HS_IO_CLK_0,
    OUT1_HS_IO_CLK_0,
    OUT2_FABCLK_0,
    PAT_GEN_DATA,
    PAT_GEN_FV,
    PAT_GEN_HSYNC,
    PAT_GEN_LV,
    PAT_GEN_VSYNC,
    PLL_LOCK_0,
    RX_BIT_SLIP_0,
    RX_BIT_SLIP_CNT,
    RX_CLK_G_0,
    TX_PAT_CLK
);

//--------------------------------------------------------------------
// Input
//--------------------------------------------------------------------
input        REF_CLK_0;
//--------------------------------------------------------------------
// Output
//--------------------------------------------------------------------
output       BITALIGN_DATA_MATCH;
output       BITALIGN_DATA_SYNC;
output       BIT_ALGN_CLR_FLGS_0;
output       BIT_ALGN_DIR_0;
output       BIT_ALGN_DONE_0;
output       BIT_ALGN_LOAD_0;
output       BIT_ALGN_MON_CALC_RST;
output       BIT_ALGN_MOVE_0;
output       BIT_ALGN_OOR_0;
output       BIT_ALGN_RSTRT_0;
output       BIT_ALGN_START_0;
output       DELAY_LINE_OUT_OF_RANGE_0;
output       DELAY_LINE_OUT_OF_RANGE_1;
output       EYE_MONITOR_EARLY_0;
output       EYE_MONITOR_EARLY_1;
output       EYE_MONITOR_LATE_0;
output       EYE_MONITOR_LATE_1;
output [7:0] L0_RXD_DATA;
output [7:0] L1_RXD_DATA;
output       OUT0_HS_IO_CLK_0;
output       OUT1_HS_IO_CLK_0;
output       OUT2_FABCLK_0;
output [7:0] PAT_GEN_DATA;
output       PAT_GEN_FV;
output       PAT_GEN_HSYNC;
output       PAT_GEN_LV;
output       PAT_GEN_VSYNC;
output       PLL_LOCK_0;
output       RX_BIT_SLIP_0;
output [3:0] RX_BIT_SLIP_CNT;
output       RX_CLK_G_0;
output       TX_PAT_CLK;
//--------------------------------------------------------------------
// Nets
//--------------------------------------------------------------------
wire         BIT_ALGN_CLR_FLGS_0_net_0;
wire         BIT_ALGN_DIR_0_net_0;
wire         BIT_ALGN_DONE_0_net_0;
wire         BIT_ALGN_LOAD_0_net_0;
wire         BIT_ALGN_MON_CALC_RST_net_0;
wire         BIT_ALGN_MOVE_0_net_0;
wire         BIT_ALGN_OOR_0_net_0;
wire         BIT_ALGN_RSTRT_0_net_0;
wire         BIT_ALGN_START_0_net_0;
wire         BITALIGN_DATA_MATCH_net_0;
wire         BITALIGN_DATA_SYNC_net_0;
wire         DELAY_LINE_OUT_OF_RANGE_0_net_0;
wire         DELAY_LINE_OUT_OF_RANGE_1_net_0;
wire         EYE_MONITOR_EARLY_0_net_0;
wire         EYE_MONITOR_EARLY_1_net_0;
wire         EYE_MONITOR_LATE_0_net_0;
wire         EYE_MONITOR_LATE_1_net_0;
wire         IOG_IOD_DDRX4_COMP_0_TX_PAT_CLK_N;
wire   [0:0] IOG_IOD_DDRX4_COMP_0_TXD_PAT_0;
wire   [0:0] IOG_IOD_DDRX4_COMP_0_TXD_PAT_N_1;
wire   [7:0] L0_RXD_DATA_net_0;
wire   [7:0] L1_RXD_DATA_net_0;
wire         OUT0_HS_IO_CLK_0_net_0;
wire         OUT1_HS_IO_CLK_0_net_0;
wire         OUT2_FABCLK_0_net_0;
wire   [7:0] PAT_GEN_DATA_net_0;
wire         PAT_GEN_FV_net_0;
wire         PAT_GEN_HSYNC_net_0;
wire         PAT_GEN_LV_net_0;
wire         PAT_GEN_VSYNC_net_0;
wire         PLL_LOCK_0_net_0;
wire         REF_CLK_0;
wire         RX_BIT_SLIP_0_net_0;
wire   [3:0] RX_BIT_SLIP_CNT_net_0;
wire         RX_CLK_G_0_net_0;
wire         TX_PAT_CLK_net_0;
wire         BIT_ALGN_DONE_0_net_1;
wire         BIT_ALGN_OOR_0_net_1;
wire         BIT_ALGN_START_0_net_1;
wire         OUT0_HS_IO_CLK_0_net_1;
wire         DELAY_LINE_OUT_OF_RANGE_1_net_1;
wire         EYE_MONITOR_EARLY_1_net_1;
wire         EYE_MONITOR_EARLY_0_net_1;
wire         EYE_MONITOR_LATE_1_net_1;
wire         EYE_MONITOR_LATE_0_net_1;
wire         BIT_ALGN_RSTRT_0_net_1;
wire         DELAY_LINE_OUT_OF_RANGE_0_net_1;
wire         BITALIGN_DATA_SYNC_net_1;
wire         BIT_ALGN_MON_CALC_RST_net_1;
wire         BIT_ALGN_DIR_0_net_1;
wire         BIT_ALGN_CLR_FLGS_0_net_1;
wire         BIT_ALGN_LOAD_0_net_1;
wire         BIT_ALGN_MOVE_0_net_1;
wire         RX_CLK_G_0_net_1;
wire         RX_BIT_SLIP_0_net_1;
wire         PAT_GEN_LV_net_1;
wire         PAT_GEN_HSYNC_net_1;
wire         PAT_GEN_VSYNC_net_1;
wire         PAT_GEN_FV_net_1;
wire         OUT2_FABCLK_0_net_1;
wire         OUT1_HS_IO_CLK_0_net_1;
wire         PLL_LOCK_0_net_1;
wire         TX_PAT_CLK_net_1;
wire   [7:0] L0_RXD_DATA_net_1;
wire   [7:0] L1_RXD_DATA_net_1;
wire   [7:0] PAT_GEN_DATA_net_1;
wire   [3:0] RX_BIT_SLIP_CNT_net_1;
wire         BITALIGN_DATA_MATCH_net_1;
wire   [1:0] RXD_net_0;
wire   [1:0] RXD_N_net_0;
//--------------------------------------------------------------------
// TiedOff Nets
//--------------------------------------------------------------------
wire         GND_net;
wire         VCC_net;
wire   [2:0] BIT_ALGN_EYE_IN_const_net_0;
wire   [7:0] data_pattern_const_net_0;
//--------------------------------------------------------------------
// Constant assignments
//--------------------------------------------------------------------
assign GND_net                     = 1'b0;
assign VCC_net                     = 1'b1;
assign BIT_ALGN_EYE_IN_const_net_0 = 3'h5;
assign data_pattern_const_net_0    = 8'hA5;
//--------------------------------------------------------------------
// Top level output port assignments
//--------------------------------------------------------------------
assign BIT_ALGN_DONE_0_net_1           = BIT_ALGN_DONE_0_net_0;
assign BIT_ALGN_DONE_0                 = BIT_ALGN_DONE_0_net_1;
assign BIT_ALGN_OOR_0_net_1            = BIT_ALGN_OOR_0_net_0;
assign BIT_ALGN_OOR_0                  = BIT_ALGN_OOR_0_net_1;
assign BIT_ALGN_START_0_net_1          = BIT_ALGN_START_0_net_0;
assign BIT_ALGN_START_0                = BIT_ALGN_START_0_net_1;
assign OUT0_HS_IO_CLK_0_net_1          = OUT0_HS_IO_CLK_0_net_0;
assign OUT0_HS_IO_CLK_0                = OUT0_HS_IO_CLK_0_net_1;
assign DELAY_LINE_OUT_OF_RANGE_1_net_1 = DELAY_LINE_OUT_OF_RANGE_1_net_0;
assign DELAY_LINE_OUT_OF_RANGE_1       = DELAY_LINE_OUT_OF_RANGE_1_net_1;
assign EYE_MONITOR_EARLY_1_net_1       = EYE_MONITOR_EARLY_1_net_0;
assign EYE_MONITOR_EARLY_1             = EYE_MONITOR_EARLY_1_net_1;
assign EYE_MONITOR_EARLY_0_net_1       = EYE_MONITOR_EARLY_0_net_0;
assign EYE_MONITOR_EARLY_0             = EYE_MONITOR_EARLY_0_net_1;
assign EYE_MONITOR_LATE_1_net_1        = EYE_MONITOR_LATE_1_net_0;
assign EYE_MONITOR_LATE_1              = EYE_MONITOR_LATE_1_net_1;
assign EYE_MONITOR_LATE_0_net_1        = EYE_MONITOR_LATE_0_net_0;
assign EYE_MONITOR_LATE_0              = EYE_MONITOR_LATE_0_net_1;
assign BIT_ALGN_RSTRT_0_net_1          = BIT_ALGN_RSTRT_0_net_0;
assign BIT_ALGN_RSTRT_0                = BIT_ALGN_RSTRT_0_net_1;
assign DELAY_LINE_OUT_OF_RANGE_0_net_1 = DELAY_LINE_OUT_OF_RANGE_0_net_0;
assign DELAY_LINE_OUT_OF_RANGE_0       = DELAY_LINE_OUT_OF_RANGE_0_net_1;
assign BITALIGN_DATA_SYNC_net_1        = BITALIGN_DATA_SYNC_net_0;
assign BITALIGN_DATA_SYNC              = BITALIGN_DATA_SYNC_net_1;
assign BIT_ALGN_MON_CALC_RST_net_1     = BIT_ALGN_MON_CALC_RST_net_0;
assign BIT_ALGN_MON_CALC_RST           = BIT_ALGN_MON_CALC_RST_net_1;
assign BIT_ALGN_DIR_0_net_1            = BIT_ALGN_DIR_0_net_0;
assign BIT_ALGN_DIR_0                  = BIT_ALGN_DIR_0_net_1;
assign BIT_ALGN_CLR_FLGS_0_net_1       = BIT_ALGN_CLR_FLGS_0_net_0;
assign BIT_ALGN_CLR_FLGS_0             = BIT_ALGN_CLR_FLGS_0_net_1;
assign BIT_ALGN_LOAD_0_net_1           = BIT_ALGN_LOAD_0_net_0;
assign BIT_ALGN_LOAD_0                 = BIT_ALGN_LOAD_0_net_1;
assign BIT_ALGN_MOVE_0_net_1           = BIT_ALGN_MOVE_0_net_0;
assign BIT_ALGN_MOVE_0                 = BIT_ALGN_MOVE_0_net_1;
assign RX_CLK_G_0_net_1                = RX_CLK_G_0_net_0;
assign RX_CLK_G_0                      = RX_CLK_G_0_net_1;
assign RX_BIT_SLIP_0_net_1             = RX_BIT_SLIP_0_net_0;
assign RX_BIT_SLIP_0                   = RX_BIT_SLIP_0_net_1;
assign PAT_GEN_LV_net_1                = PAT_GEN_LV_net_0;
assign PAT_GEN_LV                      = PAT_GEN_LV_net_1;
assign PAT_GEN_HSYNC_net_1             = PAT_GEN_HSYNC_net_0;
assign PAT_GEN_HSYNC                   = PAT_GEN_HSYNC_net_1;
assign PAT_GEN_VSYNC_net_1             = PAT_GEN_VSYNC_net_0;
assign PAT_GEN_VSYNC                   = PAT_GEN_VSYNC_net_1;
assign PAT_GEN_FV_net_1                = PAT_GEN_FV_net_0;
assign PAT_GEN_FV                      = PAT_GEN_FV_net_1;
assign OUT2_FABCLK_0_net_1             = OUT2_FABCLK_0_net_0;
assign OUT2_FABCLK_0                   = OUT2_FABCLK_0_net_1;
assign OUT1_HS_IO_CLK_0_net_1          = OUT1_HS_IO_CLK_0_net_0;
assign OUT1_HS_IO_CLK_0                = OUT1_HS_IO_CLK_0_net_1;
assign PLL_LOCK_0_net_1                = PLL_LOCK_0_net_0;
assign PLL_LOCK_0                      = PLL_LOCK_0_net_1;
assign TX_PAT_CLK_net_1                = TX_PAT_CLK_net_0;
assign TX_PAT_CLK                      = TX_PAT_CLK_net_1;
assign L0_RXD_DATA_net_1               = L0_RXD_DATA_net_0;
assign L0_RXD_DATA[7:0]                = L0_RXD_DATA_net_1;
assign L1_RXD_DATA_net_1               = L1_RXD_DATA_net_0;
assign L1_RXD_DATA[7:0]                = L1_RXD_DATA_net_1;
assign PAT_GEN_DATA_net_1              = PAT_GEN_DATA_net_0;
assign PAT_GEN_DATA[7:0]               = PAT_GEN_DATA_net_1;
assign RX_BIT_SLIP_CNT_net_1           = RX_BIT_SLIP_CNT_net_0;
assign RX_BIT_SLIP_CNT[3:0]            = RX_BIT_SLIP_CNT_net_1;
assign BITALIGN_DATA_MATCH_net_1       = BITALIGN_DATA_MATCH_net_0;
assign BITALIGN_DATA_MATCH             = BITALIGN_DATA_MATCH_net_1;
//--------------------------------------------------------------------
// Concatenation assignments
//--------------------------------------------------------------------
assign RXD_net_0   = { IOG_IOD_DDRX4_COMP_0_TXD_PAT_0[0] , IOG_IOD_DDRX4_COMP_0_TXD_PAT_0[0] };
assign RXD_N_net_0 = { IOG_IOD_DDRX4_COMP_0_TXD_PAT_N_1[0] , IOG_IOD_DDRX4_COMP_0_TXD_PAT_N_1[0] };
//--------------------------------------------------------------------
// Component instances
//--------------------------------------------------------------------
parameter REF_CLK_0_PERIOD     = 20000;    // 50 MHZ
reg  REF_CLK;
initial
begin
    REF_CLK = 1'b0;
end
always @(REF_CLK)
    #(REF_CLK_0_PERIOD / 2.0) REF_CLK <= !REF_CLK;

//--------IOG_IOD_DDRX4_COMP
IOG_IOD_DDRX4_COMP IOG_IOD_DDRX4_COMP_0(
        // Inputs
        .REF_CLK_0                 ( REF_CLK ),
        .BIT_ALGN_HOLD             ( GND_net ),
        .RESTARTN                  ( VCC_net ),
        .RX_CLK_P                  ( TX_PAT_CLK_net_0 ),
        .RX_CLK_N                  ( IOG_IOD_DDRX4_COMP_0_TX_PAT_CLK_N ),
        .RXD                       ( RXD_net_0 ),
        .BIT_ALGN_EYE_IN           ( BIT_ALGN_EYE_IN_const_net_0 ),
        .data_pattern              ( data_pattern_const_net_0 ),
        .RXD_N                     ( RXD_N_net_0 ),
        // Outputs
        .TX_PAT_CLK                ( TX_PAT_CLK_net_0 ),
        .OUT0_HS_IO_CLK_0          ( OUT0_HS_IO_CLK_0_net_0 ),
        .BIT_ALGN_START_0          ( BIT_ALGN_START_0_net_0 ),
        .BIT_ALGN_DONE_0           ( BIT_ALGN_DONE_0_net_0 ),
        .BIT_ALGN_OOR_0            ( BIT_ALGN_OOR_0_net_0 ),
        .DELAY_LINE_OUT_OF_RANGE_0 ( DELAY_LINE_OUT_OF_RANGE_0_net_0 ),
        .DELAY_LINE_OUT_OF_RANGE_1 ( DELAY_LINE_OUT_OF_RANGE_1_net_0 ),
        .EYE_MONITOR_EARLY_1       ( EYE_MONITOR_EARLY_1_net_0 ),
        .EYE_MONITOR_EARLY_0       ( EYE_MONITOR_EARLY_0_net_0 ),
        .EYE_MONITOR_LATE_1        ( EYE_MONITOR_LATE_1_net_0 ),
        .EYE_MONITOR_LATE_0        ( EYE_MONITOR_LATE_0_net_0 ),
        .BIT_ALGN_RSTRT_0          ( BIT_ALGN_RSTRT_0_net_0 ),
        .BIT_ALGN_MON_CALC_RST     ( BIT_ALGN_MON_CALC_RST_net_0 ),
        .PAT_GEN_FV                ( PAT_GEN_FV_net_0 ),
        .PAT_GEN_HSYNC             ( PAT_GEN_HSYNC_net_0 ),
        .PAT_GEN_VSYNC             ( PAT_GEN_VSYNC_net_0 ),
        .PAT_GEN_LV                ( PAT_GEN_LV_net_0 ),
        .BITALIGN_DATA_SYNC        ( BITALIGN_DATA_SYNC_net_0 ),
        .RX_CLK_G_0                ( RX_CLK_G_0_net_0 ),
        .BIT_ALGN_MOVE_0           ( BIT_ALGN_MOVE_0_net_0 ),
        .BIT_ALGN_CLR_FLGS_0       ( BIT_ALGN_CLR_FLGS_0_net_0 ),
        .BIT_ALGN_LOAD_0           ( BIT_ALGN_LOAD_0_net_0 ),
        .BIT_ALGN_DIR_0            ( BIT_ALGN_DIR_0_net_0 ),
        .RX_BIT_SLIP_0             ( RX_BIT_SLIP_0_net_0 ),
        .OUT2_FABCLK_0             ( OUT2_FABCLK_0_net_0 ),
        .OUT1_HS_IO_CLK_0          ( OUT1_HS_IO_CLK_0_net_0 ),
        .PLL_LOCK_0                ( PLL_LOCK_0_net_0 ),
        .TX_PAT_CLK_N              ( IOG_IOD_DDRX4_COMP_0_TX_PAT_CLK_N ),
        .L0_RXD_DATA               ( L0_RXD_DATA_net_0 ),
        .L1_RXD_DATA               ( L1_RXD_DATA_net_0 ),
        .PAT_GEN_DATA              ( PAT_GEN_DATA_net_0 ),
        .TXD_PAT                   ( IOG_IOD_DDRX4_COMP_0_TXD_PAT_0 ),
        .TXD_PAT_N                 ( IOG_IOD_DDRX4_COMP_0_TXD_PAT_N_1 ),
        .RX_BIT_SLIP_CNT           ( RX_BIT_SLIP_CNT_net_0 ),
        .BITALIGN_DATA_MATCH       ( BITALIGN_DATA_MATCH_net_0 ) 
        );


/* Stand alone Testbench */

`define BSLIP_EN
parameter SYSCLK_PERIOD        	     = 2000;     // 500 MHZ
parameter IOG_DATA_TYPE              = 3'b010;   // Incremental Data Fashion without Delays 
parameter NUM_IO	             = 4;
parameter FABRIC_RATIO               = 4;     // Data_Wdith = 8
parameter IOG_DATA_WIDTH             = (FABRIC_RATIO == 5) ? 10 : (FABRIC_RATIO == 4) ? 8 :  (FABRIC_RATIO == 3) ? 7 :  (FABRIC_RATIO == 2) ? 4 : 2;
parameter SKIP_TRNG     = 0;     //0 - Perform training, 1 - No training is done
parameter HOLD_TRNG     = 0;     //0 - Continue training, 1 - Hold training

integer i,j,k,x,y,sim_end;
reg  init_flag;
reg  SYSCLK;
reg  REF_CLK_0;
reg  NSYSRESET;
reg  RAND_RXD0;
reg  RAND_RXD1;
reg  RAND_RXD2;
reg  RAND_RXD3;
reg  RAND_RXD4;
reg  RAND_RXD5;
reg  RAND_RXD6;
reg  RAND_RXD7;
reg  RAND_RXD8;
reg  RAND_RXD9;
reg  BITSLIP_RXD0_PATTERN_DIS;
reg  BITSLIP_RXD0_START;
reg  [IOG_DATA_WIDTH-1:0] BITSLIP_RXD0_PATTERN;
reg  [IOG_DATA_WIDTH-1:0] sig_RXD0_inc;
reg  [1:0] sig_RXD0;
reg  [2:0] BIT_ALGN_EYE_IN;
reg [7:0] tb_tap_cnt;
reg [IOG_DATA_WIDTH-1:0] L0_RXD_DATA_TRNG [1299:0];
reg [IOG_DATA_WIDTH-1:0] L1_RXD_DATA_TRNG [1299:0];
reg [IOG_DATA_WIDTH-1:0] L0_RXD_DATA_CMP [15:0];
reg [IOG_DATA_WIDTH-1:0] L1_RXD_DATA_CMP [15:0];
reg [3:0] L0_L1_bit_loc;
reg [1299:0] L0_loc;
reg [1299:0] L1_loc;
wire [NUM_IO-1:0] RXD0;
wire [NUM_IO-1:0] RXD0_N;

  assign RXD0   = {sig_RXD0,sig_RXD0,sig_RXD0,sig_RXD0};
  assign RXD0_N = {~sig_RXD0,~sig_RXD0,~sig_RXD0,~sig_RXD0};
  //Delay the Input every 25ps after negedge of SYSCLK 
  always @ (*)
  begin
   for (sim_end=0;sim_end<32;sim_end=sim_end+1)   	  
   begin
    $display($time,"CoreRxIODBitAlign_TB: Running for EYE_WIDTH = %d ............... ",BIT_ALGN_EYE_IN); 
    //Feed Data Pattern for Training of Tap Delays 	  
    j=$urandom%(SYSCLK_PERIOD/16);  // 100ps Margin kept as random Hence Divided by 16
    k=$urandom%(SYSCLK_PERIOD/16);  // 100ps Margin kept as random Hence Divided by 16
    i=0;
    L0_loc='d0;
    L1_loc='d0;
    for (i=0;i<1;)   	  
     begin

      case (IOG_DATA_TYPE)

      //D0 Input  -> 00_01_10_11_01 	      
      //D1 Input  -> 00_01_10_11_01 	      
      //D0 Output -> 10_11_01_10_00 	      
      //D1 Output -> 10_11_01_10_00 	      
      //Incremenatal data without delays 	       
      3'b000:
      begin 	      
        BITSLIP_RXD0_PATTERN = 10'b10_11_01_10_00; 	      
        sig_RXD0 = 2'b00;
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2) sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data
      end

      //D0 Input  -> 00_01_10_11_01 	      
      //D1 Input  -> 00_01_10_11_01
      //D0 Output -> 10_11_01_10_00 	      
      //D1 Output -> 10_11_01_10_00 	      
      //Incremenatal data with delays 	       
      3'b001:
      begin 
        BITSLIP_RXD0_PATTERN = 10'b10_11_01_10_00; 	      
        if (L0_loc==0) #(j) sig_RXD0 = 2'b00;
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2) sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b11; 	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = 2'b00; 	  //Next Data
      end

      //Random data without delays 	       
      3'b010:
      begin 	      
	if (L0_loc == 'd0) begin
	RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end 
	sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]};
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD1 = $urandom%2; BITSLIP_RXD0_PATTERN[1] = RAND_RXD1; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD2 = $urandom%2; BITSLIP_RXD0_PATTERN[2] = RAND_RXD2; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD3 = $urandom%2; BITSLIP_RXD0_PATTERN[3] = RAND_RXD3; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD4 = $urandom%2; BITSLIP_RXD0_PATTERN[4] = RAND_RXD4; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD5 = $urandom%2; BITSLIP_RXD0_PATTERN[5] = RAND_RXD5; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD6 = $urandom%2; BITSLIP_RXD0_PATTERN[6] = RAND_RXD6; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD7 = $urandom%2; BITSLIP_RXD0_PATTERN[7] = RAND_RXD7; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD8 = $urandom%2; BITSLIP_RXD0_PATTERN[8] = RAND_RXD8; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD9 = $urandom%2; BITSLIP_RXD0_PATTERN[9] = RAND_RXD9; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data
        end

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data

	if (FABRIC_RATIO == 4) begin
	 if (L0_loc == 'd1) begin
		if ({RAND_RXD7,RAND_RXD6,RAND_RXD5,RAND_RXD4} == {RAND_RXD3,RAND_RXD2,RAND_RXD1,RAND_RXD0}) begin
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern Before =%b",BITSLIP_RXD0_PATTERN);
		      BITSLIP_RXD0_PATTERN = {RAND_RXD7,RAND_RXD6,RAND_RXD5,RAND_RXD4,~RAND_RXD3,~RAND_RXD2,~RAND_RXD1,~RAND_RXD0}; 
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern After  =%b",BITSLIP_RXD0_PATTERN);
		end	
  	 end	
	end
	if (FABRIC_RATIO == 5) begin
	 if (L0_loc == 'd1) begin
		if ({RAND_RXD9,RAND_RXD8,RAND_RXD7,RAND_RXD6,RAND_RXD5} == {RAND_RXD4,RAND_RXD3,RAND_RXD2,RAND_RXD1,RAND_RXD0}) begin
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern Before =%b",BITSLIP_RXD0_PATTERN);
		      BITSLIP_RXD0_PATTERN = {RAND_RXD9,RAND_RXD8,RAND_RXD7,RAND_RXD6,RAND_RXD5,~RAND_RXD4,~RAND_RXD3,~RAND_RXD2,~RAND_RXD1,~RAND_RXD0}; 
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern After  =%b",BITSLIP_RXD0_PATTERN);
		end	
  	 end	
	end
      end

      //Random data with delays 	       
      3'b011:
      begin 	      
	if (L0_loc == 'd0) begin
	RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end 
        if (L0_loc==0) #(j) sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD1 = $urandom%2; BITSLIP_RXD0_PATTERN[1] = RAND_RXD1; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD2 = $urandom%2; BITSLIP_RXD0_PATTERN[2] = RAND_RXD2; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD3 = $urandom%2; BITSLIP_RXD0_PATTERN[3] = RAND_RXD3; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD3 = $urandom%2; BITSLIP_RXD0_PATTERN[4] = RAND_RXD4; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD5 = $urandom%2; BITSLIP_RXD0_PATTERN[5] = RAND_RXD5; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD6 = $urandom%2; BITSLIP_RXD0_PATTERN[6] = RAND_RXD6; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD7 = $urandom%2; BITSLIP_RXD0_PATTERN[7] = RAND_RXD7; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD8 = $urandom%2; BITSLIP_RXD0_PATTERN[8] = RAND_RXD8; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD9 = $urandom%2; BITSLIP_RXD0_PATTERN[9] = RAND_RXD9; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data
	end

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	if (L1_loc == 'd0) begin
	RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data

	if (FABRIC_RATIO == 4) begin
	 if (L0_loc == 'd1) begin
		if ({RAND_RXD7,RAND_RXD6,RAND_RXD5,RAND_RXD4} == {RAND_RXD3,RAND_RXD2,RAND_RXD1,RAND_RXD0}) begin
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern Before =%b",BITSLIP_RXD0_PATTERN);
		      BITSLIP_RXD0_PATTERN = {RAND_RXD7,RAND_RXD6,RAND_RXD5,RAND_RXD4,~RAND_RXD3,~RAND_RXD2,~RAND_RXD1,~RAND_RXD0}; 
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern After  =%b",BITSLIP_RXD0_PATTERN);
		end	
  	 end	
	end
	if (FABRIC_RATIO == 5) begin
	 if (L0_loc == 'd1) begin
		if ({RAND_RXD9,RAND_RXD8,RAND_RXD7,RAND_RXD6,RAND_RXD5} == {RAND_RXD4,RAND_RXD3,RAND_RXD2,RAND_RXD1,RAND_RXD0}) begin
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern Before =%b",BITSLIP_RXD0_PATTERN);
		      BITSLIP_RXD0_PATTERN = {RAND_RXD9,RAND_RXD8,RAND_RXD7,RAND_RXD6,RAND_RXD5,~RAND_RXD4,~RAND_RXD3,~RAND_RXD2,~RAND_RXD1,~RAND_RXD0}; 
        	     $display($time,"CoreRxIODBitAlign_TB: Overlapping Pattern After  =%b",BITSLIP_RXD0_PATTERN);
		end	
  	 end	
	end			
      end

      //Fixed data without delays 	       
      3'b100:
      begin 	      
        BITSLIP_RXD0_PATTERN = 10'b11_01_01_10_10;
        sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data
      end

      //Fixed data with delays 	       
      3'b101:
      begin 	      
        BITSLIP_RXD0_PATTERN = 10'b11_01_01_10_10;
        if (L0_loc==0) #(j) sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 
	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data

	L0_RXD_DATA_TRNG[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_TRNG[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data
      end

      endcase

`ifdef BSLIP_EN
      if (CoreRxIODBitAlign_tb.u_CoreRxIODBitAlign_Rx4_mipi_wrap.u_CoreRxIODBitAlign_Rx4_wrap.u_CoreRxIODBitAlign_top_0.BIT_ALGN_DONE == 1'b1) 
`else
      if (MIPI_CSIRX_LINE_VALID_0 | ((!MIPI_CSIRX_LINE_VALID_0_FLG0) && (BIT_ALGN_DONE_3 && BIT_ALGN_DONE_2   && BIT_ALGN_DONE_1   && BIT_ALGN_DONE_0)))		      
`endif
      begin
       MIPI_CSIRX_LINE_VALID_0_FLG0=1;	      
       i=1;
       L0_L1_bit_loc='d0; 
       L0_loc='d0;
       L1_loc='d0;
       $display($time,"CoreRxIODBitAlign_TB: EYE_WIDTH = %d, FINAL_TAP_DLYS=%d, IOD_EARLY_LATE=%d",
		BIT_ALGN_EYE_IN , tb_tap_cnt , (CoreRxIODBitAlign_tb.u_CoreRxIODBitAlign_Rx4_mipi_wrap.u_CoreRxIODBitAlign_Rx4_wrap.U_IOG_IOD_DDRX4_COMP_0.EYE_MONITOR_EARLY[0] & CoreRxIODBitAlign_tb.u_CoreRxIODBitAlign_Rx4_mipi_wrap.u_CoreRxIODBitAlign_Rx4_wrap.U_IOG_IOD_DDRX4_COMP_0.EYE_MONITOR_LATE[0])); 
      end	
      else
      begin	      
       i=0;
       L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
       L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
       L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;
      end       
     end 

     //Delay Added to feed the fresh Data for Tap Delay checks 
     for (x=0;x<100;x=x+1) 
     #(SYSCLK_PERIOD * 1) init_flag = 1'b1;

     L0_L1_bit_loc='d0; 
     L0_loc='d0;
     L1_loc='d0;

     init_flag = 1'b0;

     @(posedge SYSCLK)

     //Feed Data Pattern for Training - Data Integrity checks 	  
     j=$urandom%(SYSCLK_PERIOD/16);  // 100ps Margin kept as random Hence Divided by 16
     k=$urandom%(SYSCLK_PERIOD/16);  // 100ps Margin kept as random Hence Divided by 16	     
     //@(negedge SYSCLK)
     for (y=0;y<1;)   	  
     begin	     
      BITSLIP_RXD0_START = 1'b1; 
      case (IOG_DATA_TYPE)

      //D0 Input  -> 00_01_10_11_01 	      
      //D1 Input  -> 00_01_10_11_01 	      
      //D0 Output -> 10_11_01_10_00 	      
      //D1 Output -> 10_11_01_10_00 	      
      //Incremenatal data without delays 	       
      3'b000:
      begin 	      
        BITSLIP_RXD0_PATTERN = 10'b10_11_01_10_00; 	      
	if (!BITSLIP_RXD0_PATTERN_DIS)
        begin
        sig_RXD0 = 2'b00;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 =2'b00; 	  	  //Next Data
        
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data
	end
        end

        L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
        L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
        L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;

`ifdef BSLIP_EN
	if (BITSLIP_RXD0_MATCH && BITSLIP_RXD1_MATCH && BITSLIP_RXD2_MATCH && BITSLIP_RXD3_MATCH)
        begin
        BITSLIP_RXD0_PATTERN_DIS = 1'b1;		

        sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[1],sig_RXD0_inc[1]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[2],sig_RXD0_inc[2]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[3],sig_RXD0_inc[3]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[4],sig_RXD0_inc[4]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[5],sig_RXD0_inc[5]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[6],sig_RXD0_inc[6]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[7],sig_RXD0_inc[7]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

	if (FABRIC_RATIO == 5) begin
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[8],sig_RXD0_inc[8]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[9],sig_RXD0_inc[9]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	end
	
	sig_RXD0_inc = sig_RXD0_inc+1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ; 	  //Next Data
        end
`endif	
      end

      //D0 Input  -> 00_01_10_11_01 	      
      //D1 Input  -> 00_01_10_11_01
      //D0 Output -> 10_11_01_10_00 	      
      //D1 Output -> 10_11_01_10_00 	      
      //Incremenatal data with delays 	       
      3'b001:
      begin
        BITSLIP_RXD0_PATTERN = 10'b10_11_01_10_00; 	      
	if (!BITSLIP_RXD0_PATTERN_DIS)
        begin
        if (L0_loc == 0) #(j) sig_RXD0 = 2'b00;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 =2'b00; 	  	  //Next Data
        
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b11; 	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 =2'b00; 	  //Next Data
	end
        end

        L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
        L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
        L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;

`ifdef BSLIP_EN
	if (BITSLIP_RXD0_MATCH && BITSLIP_RXD1_MATCH && BITSLIP_RXD2_MATCH && BITSLIP_RXD3_MATCH)
        begin
        BITSLIP_RXD0_PATTERN_DIS = 1'b1;		

        sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[1],sig_RXD0_inc[1]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[2],sig_RXD0_inc[2]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[3],sig_RXD0_inc[3]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[4],sig_RXD0_inc[4]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[5],sig_RXD0_inc[5]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[6],sig_RXD0_inc[6]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[7],sig_RXD0_inc[7]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

	if (FABRIC_RATIO == 5) begin
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[8],sig_RXD0_inc[8]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[9],sig_RXD0_inc[9]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	end
	
	sig_RXD0_inc = sig_RXD0_inc+1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ; 	  //Next Data
        end
`endif	
      end

      //Random data without delays 	       
      3'b010:
      begin 	      
	if (!BITSLIP_RXD0_PATTERN_DIS)
	begin
	//if (L1_loc == 'd0) begin
	//RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end 
	sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]};
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD1 = $urandom%2; BITSLIP_RXD0_PATTERN[1] = RAND_RXD1; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD2 = $urandom%2; BITSLIP_RXD0_PATTERN[2] = RAND_RXD2; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD3 = $urandom%2; BITSLIP_RXD0_PATTERN[3] = RAND_RXD3; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD4 = $urandom%2; BITSLIP_RXD0_PATTERN[4] = RAND_RXD4; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD5 = $urandom%2; BITSLIP_RXD0_PATTERN[5] = RAND_RXD5; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD6 = $urandom%2; BITSLIP_RXD0_PATTERN[6] = RAND_RXD6; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD7 = $urandom%2; BITSLIP_RXD0_PATTERN[7] = RAND_RXD7; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD8 = $urandom%2; BITSLIP_RXD0_PATTERN[8] = RAND_RXD8; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD9 = $urandom%2; BITSLIP_RXD0_PATTERN[9] = RAND_RXD9; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data
	end

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data
        end

        L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
        L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
        L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;

`ifdef BSLIP_EN
	if (BITSLIP_RXD0_MATCH && BITSLIP_RXD1_MATCH && BITSLIP_RXD2_MATCH && BITSLIP_RXD3_MATCH)
        begin
        BITSLIP_RXD0_PATTERN_DIS = 1'b1;		

        sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[1],sig_RXD0_inc[1]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[2],sig_RXD0_inc[2]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[3],sig_RXD0_inc[3]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[4],sig_RXD0_inc[4]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[5],sig_RXD0_inc[5]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[6],sig_RXD0_inc[6]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[7],sig_RXD0_inc[7]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

	if (FABRIC_RATIO == 5) begin
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[8],sig_RXD0_inc[8]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[9],sig_RXD0_inc[9]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	end
	
	sig_RXD0_inc = sig_RXD0_inc+1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ; 	  //Next Data
        end
`endif	
      end

      //Random data with delays 	       
      3'b011:
      begin 	      
	if (!BITSLIP_RXD0_PATTERN_DIS)
	begin
	//if (L1_loc == 'd0) begin
	//RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end 
	if (L1_loc == 'd0) #(j) sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]};
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD1 = $urandom%2; BITSLIP_RXD0_PATTERN[1] = RAND_RXD1; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD2 = $urandom%2; BITSLIP_RXD0_PATTERN[2] = RAND_RXD2; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD3 = $urandom%2; BITSLIP_RXD0_PATTERN[3] = RAND_RXD3; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD4 = $urandom%2; BITSLIP_RXD0_PATTERN[4] = RAND_RXD4; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD5 = $urandom%2; BITSLIP_RXD0_PATTERN[5] = RAND_RXD5; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD6 = $urandom%2; BITSLIP_RXD0_PATTERN[6] = RAND_RXD6; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD7 = $urandom%2; BITSLIP_RXD0_PATTERN[7] = RAND_RXD7; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD8 = $urandom%2; BITSLIP_RXD0_PATTERN[8] = RAND_RXD8; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD9 = $urandom%2; BITSLIP_RXD0_PATTERN[9] = RAND_RXD9; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data
	end

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	//if (L1_loc == 'd0) begin
	//RAND_RXD0 = $urandom%2; BITSLIP_RXD0_PATTERN[0] = RAND_RXD0; end	     
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data
        end

        L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
        L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
        L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;

`ifdef BSLIP_EN
	if (BITSLIP_RXD0_MATCH && BITSLIP_RXD1_MATCH && BITSLIP_RXD2_MATCH && BITSLIP_RXD3_MATCH)
        begin
        BITSLIP_RXD0_PATTERN_DIS = 1'b1;		

        sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[1],sig_RXD0_inc[1]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[2],sig_RXD0_inc[2]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[3],sig_RXD0_inc[3]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[4],sig_RXD0_inc[4]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[5],sig_RXD0_inc[5]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[6],sig_RXD0_inc[6]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[7],sig_RXD0_inc[7]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

	if (FABRIC_RATIO == 5) begin
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[8],sig_RXD0_inc[8]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[9],sig_RXD0_inc[9]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	end
	
	sig_RXD0_inc = sig_RXD0_inc+1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ; 	  //Next Data
        end
`endif	
      end

      //Fixed data without delays 	       
      3'b100:
      begin 	      
        BITSLIP_RXD0_PATTERN = 10'b11_01_01_10_10;
	if (!BITSLIP_RXD0_PATTERN_DIS)
	begin
	sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]};
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data
	end

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data
        end

        L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
        L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
        L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;

`ifdef BSLIP_EN
	if (BITSLIP_RXD0_MATCH && BITSLIP_RXD1_MATCH && BITSLIP_RXD2_MATCH && BITSLIP_RXD3_MATCH)
        begin
        BITSLIP_RXD0_PATTERN_DIS = 1'b1;		

        sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[1],sig_RXD0_inc[1]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[2],sig_RXD0_inc[2]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[3],sig_RXD0_inc[3]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[4],sig_RXD0_inc[4]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[5],sig_RXD0_inc[5]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[6],sig_RXD0_inc[6]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[7],sig_RXD0_inc[7]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

	if (FABRIC_RATIO == 5) begin
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[8],sig_RXD0_inc[8]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[9],sig_RXD0_inc[9]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	end	
	
	sig_RXD0_inc = sig_RXD0_inc+1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ; 	  //Next Data
        end
`endif	
      end


      //Fixed data with delays 	       
      3'b101:
      begin 	      
        BITSLIP_RXD0_PATTERN = 10'b11_01_01_10_10;
	if (!BITSLIP_RXD0_PATTERN_DIS)
	begin
	if (L1_loc == 'd0) #(j) sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]};
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[1],BITSLIP_RXD0_PATTERN[1]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[2],BITSLIP_RXD0_PATTERN[2]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[3],BITSLIP_RXD0_PATTERN[3]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[4],BITSLIP_RXD0_PATTERN[4]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[5],BITSLIP_RXD0_PATTERN[5]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[6],BITSLIP_RXD0_PATTERN[6]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[7],BITSLIP_RXD0_PATTERN[7]}; 	  	  //Next Data

	if (FABRIC_RATIO == 5) begin
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[8],BITSLIP_RXD0_PATTERN[8]}; 	  	  //Next Data

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[9],BITSLIP_RXD0_PATTERN[9]}; 	  	  //Next Data
	end

	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = sig_RXD0[0];    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = sig_RXD0[1];    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
        #(SYSCLK_PERIOD/2)    sig_RXD0 = {BITSLIP_RXD0_PATTERN[0],BITSLIP_RXD0_PATTERN[0]}; 	  	  //Next Data
        end

        L0_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L0_loc + 1 : L0_loc + 0;
        L1_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? L1_loc + 1 : L1_loc + 0;
        L0_L1_bit_loc = (L0_L1_bit_loc == IOG_DATA_WIDTH) ? 'd0 : L0_L1_bit_loc + 0;

`ifdef BSLIP_EN
	if (BITSLIP_RXD0_MATCH && BITSLIP_RXD1_MATCH && BITSLIP_RXD2_MATCH && BITSLIP_RXD3_MATCH)
        begin
        BITSLIP_RXD0_PATTERN_DIS = 1'b1;		

        sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ;
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[1],sig_RXD0_inc[1]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[2],sig_RXD0_inc[2]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[3],sig_RXD0_inc[3]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[4],sig_RXD0_inc[4]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[5],sig_RXD0_inc[5]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[6],sig_RXD0_inc[6]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[7],sig_RXD0_inc[7]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

	if (FABRIC_RATIO == 5) begin
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[8],sig_RXD0_inc[8]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b0;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b0;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;

        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[9],sig_RXD0_inc[9]} ; 	  //Next Data
	L0_RXD_DATA_CMP[L0_loc][L0_L1_bit_loc] = 1'b1;    //D0
	L1_RXD_DATA_CMP[L1_loc][L0_L1_bit_loc] = 1'b1;    //D1
	L0_L1_bit_loc = L0_L1_bit_loc + 1;
	end
	
	sig_RXD0_inc = sig_RXD0_inc+1;
        #(SYSCLK_PERIOD/2)     sig_RXD0 = {sig_RXD0_inc[0],sig_RXD0_inc[0]} ; 	  //Next Data
        end
`endif 	
      end

      endcase

`ifdef BSLIP_EN
      if (BITSLIP_RXD3_SYNC && BITSLIP_RXD2_SYNC && BITSLIP_RXD1_SYNC && BITSLIP_RXD0_SYNC) 
`else	      
      //if (BIT_ALGN_DONE_3   && BIT_ALGN_DONE_2   && BIT_ALGN_DONE_1   && BIT_ALGN_DONE_0)
      if (MIPI_CSIRX_LINE_VALID_0 | ((!MIPI_CSIRX_LINE_VALID_0_FLG1) && (BIT_ALGN_DONE_3 && BIT_ALGN_DONE_2   && BIT_ALGN_DONE_1   && BIT_ALGN_DONE_0)))		      
`endif 	
      begin	      
       MIPI_CSIRX_LINE_VALID_0_FLG1=1;	      
       y=1;
       BITSLIP_RXD0_START = 1'b0;
       BITSLIP_RXD0_PATTERN_DIS = 1'b0;		
       sig_RXD0_inc = 10'h0;
      end 
      else
      begin	      
       y=0;	      
       BITSLIP_RXD0_START = 1'b1;
      end 
     end

     //Issue Reset to check for Next Eye Width checks  
     NSYSRESET = 1'b0;
     #(SYSCLK_PERIOD * 10)
     NSYSRESET = 1'b1;

     //Check if all BIT EYE is Simulated 
     j=0;
     k=0;
     x=0;
     y=0;
     init_flag = 0;	   
     sig_RXD0 = 2'b00;
     L0_L1_bit_loc='d0;
     L0_loc='d0;
     L1_loc='d0;
     //Check for Next Eye Width - Inc By 1 
     BIT_ALGN_EYE_IN=$urandom_range(1,7);
   end 
     $display($time,"CoreRxIODBitAlign_TB: Simulation Completed for All Eye Widths"); 
     $finish;
  end

endmodule

